// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package auth

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"golang.org/x/oauth2"
)

// NewMockAuthRepository creates a new instance of MockAuthRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthRepository {
	mock := &MockAuthRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAuthRepository is an autogenerated mock type for the AuthRepository type
type MockAuthRepository struct {
	mock.Mock
}

type MockAuthRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthRepository) EXPECT() *MockAuthRepository_Expecter {
	return &MockAuthRepository_Expecter{mock: &_m.Mock}
}

// ExchangeCodeForToken provides a mock function for the type MockAuthRepository
func (_mock *MockAuthRepository) ExchangeCodeForToken(ctx context.Context, code string) (*oauth2.Token, error) {
	ret := _mock.Called(ctx, code)

	if len(ret) == 0 {
		panic("no return value specified for ExchangeCodeForToken")
	}

	var r0 *oauth2.Token
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*oauth2.Token, error)); ok {
		return returnFunc(ctx, code)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *oauth2.Token); ok {
		r0 = returnFunc(ctx, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth2.Token)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, code)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthRepository_ExchangeCodeForToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExchangeCodeForToken'
type MockAuthRepository_ExchangeCodeForToken_Call struct {
	*mock.Call
}

// ExchangeCodeForToken is a helper method to define mock.On call
//   - ctx context.Context
//   - code string
func (_e *MockAuthRepository_Expecter) ExchangeCodeForToken(ctx interface{}, code interface{}) *MockAuthRepository_ExchangeCodeForToken_Call {
	return &MockAuthRepository_ExchangeCodeForToken_Call{Call: _e.mock.On("ExchangeCodeForToken", ctx, code)}
}

func (_c *MockAuthRepository_ExchangeCodeForToken_Call) Run(run func(ctx context.Context, code string)) *MockAuthRepository_ExchangeCodeForToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthRepository_ExchangeCodeForToken_Call) Return(token *oauth2.Token, err error) *MockAuthRepository_ExchangeCodeForToken_Call {
	_c.Call.Return(token, err)
	return _c
}

func (_c *MockAuthRepository_ExchangeCodeForToken_Call) RunAndReturn(run func(ctx context.Context, code string) (*oauth2.Token, error)) *MockAuthRepository_ExchangeCodeForToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserInfoFromToken provides a mock function for the type MockAuthRepository
func (_mock *MockAuthRepository) GetUserInfoFromToken(ctx context.Context, accessToken string) (UserInfo, error) {
	ret := _mock.Called(ctx, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for GetUserInfoFromToken")
	}

	var r0 UserInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (UserInfo, error)); ok {
		return returnFunc(ctx, accessToken)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) UserInfo); ok {
		r0 = returnFunc(ctx, accessToken)
	} else {
		r0 = ret.Get(0).(UserInfo)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, accessToken)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthRepository_GetUserInfoFromToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserInfoFromToken'
type MockAuthRepository_GetUserInfoFromToken_Call struct {
	*mock.Call
}

// GetUserInfoFromToken is a helper method to define mock.On call
//   - ctx context.Context
//   - accessToken string
func (_e *MockAuthRepository_Expecter) GetUserInfoFromToken(ctx interface{}, accessToken interface{}) *MockAuthRepository_GetUserInfoFromToken_Call {
	return &MockAuthRepository_GetUserInfoFromToken_Call{Call: _e.mock.On("GetUserInfoFromToken", ctx, accessToken)}
}

func (_c *MockAuthRepository_GetUserInfoFromToken_Call) Run(run func(ctx context.Context, accessToken string)) *MockAuthRepository_GetUserInfoFromToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthRepository_GetUserInfoFromToken_Call) Return(userInfo UserInfo, err error) *MockAuthRepository_GetUserInfoFromToken_Call {
	_c.Call.Return(userInfo, err)
	return _c
}

func (_c *MockAuthRepository_GetUserInfoFromToken_Call) RunAndReturn(run func(ctx context.Context, accessToken string) (UserInfo, error)) *MockAuthRepository_GetUserInfoFromToken_Call {
	_c.Call.Return(run)
	return _c
}
