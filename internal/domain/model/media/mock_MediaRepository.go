// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package media

import (
	"context"
	"mime/multipart"

	mock "github.com/stretchr/testify/mock"
)

// NewMockMediaRepository creates a new instance of MockMediaRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMediaRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMediaRepository {
	mock := &MockMediaRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMediaRepository is an autogenerated mock type for the MediaRepository type
type MockMediaRepository struct {
	mock.Mock
}

type MockMediaRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMediaRepository) EXPECT() *MockMediaRepository_Expecter {
	return &MockMediaRepository_Expecter{mock: &_m.Mock}
}

// InsertFileMetaData provides a mock function for the type MockMediaRepository
func (_mock *MockMediaRepository) InsertFileMetaData(ctx context.Context, mediaMetaData MediaMetaData) error {
	ret := _mock.Called(ctx, mediaMetaData)

	if len(ret) == 0 {
		panic("no return value specified for InsertFileMetaData")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, MediaMetaData) error); ok {
		r0 = returnFunc(ctx, mediaMetaData)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMediaRepository_InsertFileMetaData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertFileMetaData'
type MockMediaRepository_InsertFileMetaData_Call struct {
	*mock.Call
}

// InsertFileMetaData is a helper method to define mock.On call
//   - ctx context.Context
//   - mediaMetaData MediaMetaData
func (_e *MockMediaRepository_Expecter) InsertFileMetaData(ctx interface{}, mediaMetaData interface{}) *MockMediaRepository_InsertFileMetaData_Call {
	return &MockMediaRepository_InsertFileMetaData_Call{Call: _e.mock.On("InsertFileMetaData", ctx, mediaMetaData)}
}

func (_c *MockMediaRepository_InsertFileMetaData_Call) Run(run func(ctx context.Context, mediaMetaData MediaMetaData)) *MockMediaRepository_InsertFileMetaData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 MediaMetaData
		if args[1] != nil {
			arg1 = args[1].(MediaMetaData)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMediaRepository_InsertFileMetaData_Call) Return(err error) *MockMediaRepository_InsertFileMetaData_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMediaRepository_InsertFileMetaData_Call) RunAndReturn(run func(ctx context.Context, mediaMetaData MediaMetaData) error) *MockMediaRepository_InsertFileMetaData_Call {
	_c.Call.Return(run)
	return _c
}

// UploadFileToFileStorage provides a mock function for the type MockMediaRepository
func (_mock *MockMediaRepository) UploadFileToFileStorage(ctx context.Context, objectKey string, file multipart.File) (string, error) {
	ret := _mock.Called(ctx, objectKey, file)

	if len(ret) == 0 {
		panic("no return value specified for UploadFileToFileStorage")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, multipart.File) (string, error)); ok {
		return returnFunc(ctx, objectKey, file)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, multipart.File) string); ok {
		r0 = returnFunc(ctx, objectKey, file)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, multipart.File) error); ok {
		r1 = returnFunc(ctx, objectKey, file)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMediaRepository_UploadFileToFileStorage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadFileToFileStorage'
type MockMediaRepository_UploadFileToFileStorage_Call struct {
	*mock.Call
}

// UploadFileToFileStorage is a helper method to define mock.On call
//   - ctx context.Context
//   - objectKey string
//   - file multipart.File
func (_e *MockMediaRepository_Expecter) UploadFileToFileStorage(ctx interface{}, objectKey interface{}, file interface{}) *MockMediaRepository_UploadFileToFileStorage_Call {
	return &MockMediaRepository_UploadFileToFileStorage_Call{Call: _e.mock.On("UploadFileToFileStorage", ctx, objectKey, file)}
}

func (_c *MockMediaRepository_UploadFileToFileStorage_Call) Run(run func(ctx context.Context, objectKey string, file multipart.File)) *MockMediaRepository_UploadFileToFileStorage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 multipart.File
		if args[2] != nil {
			arg2 = args[2].(multipart.File)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockMediaRepository_UploadFileToFileStorage_Call) Return(s string, err error) *MockMediaRepository_UploadFileToFileStorage_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockMediaRepository_UploadFileToFileStorage_Call) RunAndReturn(run func(ctx context.Context, objectKey string, file multipart.File) (string, error)) *MockMediaRepository_UploadFileToFileStorage_Call {
	_c.Call.Return(run)
	return _c
}
