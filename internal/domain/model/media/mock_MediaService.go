// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package media

import (
	"context"
	"mime/multipart"

	mock "github.com/stretchr/testify/mock"
)

// NewMockMediaService creates a new instance of MockMediaService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMediaService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMediaService {
	mock := &MockMediaService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMediaService is an autogenerated mock type for the MediaService type
type MockMediaService struct {
	mock.Mock
}

type MockMediaService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMediaService) EXPECT() *MockMediaService_Expecter {
	return &MockMediaService_Expecter{mock: &_m.Mock}
}

// CreateAndStoreMedia provides a mock function for the type MockMediaService
func (_mock *MockMediaService) CreateAndStoreMedia(ctx context.Context, userID string, fileName string, file multipart.File, caption string) error {
	ret := _mock.Called(ctx, userID, fileName, file, caption)

	if len(ret) == 0 {
		panic("no return value specified for CreateAndStoreMedia")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, multipart.File, string) error); ok {
		r0 = returnFunc(ctx, userID, fileName, file, caption)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMediaService_CreateAndStoreMedia_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAndStoreMedia'
type MockMediaService_CreateAndStoreMedia_Call struct {
	*mock.Call
}

// CreateAndStoreMedia is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - fileName string
//   - file multipart.File
//   - caption string
func (_e *MockMediaService_Expecter) CreateAndStoreMedia(ctx interface{}, userID interface{}, fileName interface{}, file interface{}, caption interface{}) *MockMediaService_CreateAndStoreMedia_Call {
	return &MockMediaService_CreateAndStoreMedia_Call{Call: _e.mock.On("CreateAndStoreMedia", ctx, userID, fileName, file, caption)}
}

func (_c *MockMediaService_CreateAndStoreMedia_Call) Run(run func(ctx context.Context, userID string, fileName string, file multipart.File, caption string)) *MockMediaService_CreateAndStoreMedia_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 multipart.File
		if args[3] != nil {
			arg3 = args[3].(multipart.File)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockMediaService_CreateAndStoreMedia_Call) Return(err error) *MockMediaService_CreateAndStoreMedia_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMediaService_CreateAndStoreMedia_Call) RunAndReturn(run func(ctx context.Context, userID string, fileName string, file multipart.File, caption string) error) *MockMediaService_CreateAndStoreMedia_Call {
	_c.Call.Return(run)
	return _c
}
