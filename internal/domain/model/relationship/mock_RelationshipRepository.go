// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package relationship

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockRelationshipRepository creates a new instance of MockRelationshipRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRelationshipRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRelationshipRepository {
	mock := &MockRelationshipRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRelationshipRepository is an autogenerated mock type for the RelationshipRepository type
type MockRelationshipRepository struct {
	mock.Mock
}

type MockRelationshipRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRelationshipRepository) EXPECT() *MockRelationshipRepository_Expecter {
	return &MockRelationshipRepository_Expecter{mock: &_m.Mock}
}

// DeleteFollowingByUserIDAndTargetID provides a mock function for the type MockRelationshipRepository
func (_mock *MockRelationshipRepository) DeleteFollowingByUserIDAndTargetID(ctx context.Context, userID string, targetID string) error {
	ret := _mock.Called(ctx, userID, targetID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFollowingByUserIDAndTargetID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, userID, targetID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRelationshipRepository_DeleteFollowingByUserIDAndTargetID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFollowingByUserIDAndTargetID'
type MockRelationshipRepository_DeleteFollowingByUserIDAndTargetID_Call struct {
	*mock.Call
}

// DeleteFollowingByUserIDAndTargetID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - targetID string
func (_e *MockRelationshipRepository_Expecter) DeleteFollowingByUserIDAndTargetID(ctx interface{}, userID interface{}, targetID interface{}) *MockRelationshipRepository_DeleteFollowingByUserIDAndTargetID_Call {
	return &MockRelationshipRepository_DeleteFollowingByUserIDAndTargetID_Call{Call: _e.mock.On("DeleteFollowingByUserIDAndTargetID", ctx, userID, targetID)}
}

func (_c *MockRelationshipRepository_DeleteFollowingByUserIDAndTargetID_Call) Run(run func(ctx context.Context, userID string, targetID string)) *MockRelationshipRepository_DeleteFollowingByUserIDAndTargetID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRelationshipRepository_DeleteFollowingByUserIDAndTargetID_Call) Return(err error) *MockRelationshipRepository_DeleteFollowingByUserIDAndTargetID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRelationshipRepository_DeleteFollowingByUserIDAndTargetID_Call) RunAndReturn(run func(ctx context.Context, userID string, targetID string) error) *MockRelationshipRepository_DeleteFollowingByUserIDAndTargetID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllFollowerIDsByUserID provides a mock function for the type MockRelationshipRepository
func (_mock *MockRelationshipRepository) GetAllFollowerIDsByUserID(ctx context.Context, userID string) ([]string, error) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllFollowerIDsByUserID")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRelationshipRepository_GetAllFollowerIDsByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllFollowerIDsByUserID'
type MockRelationshipRepository_GetAllFollowerIDsByUserID_Call struct {
	*mock.Call
}

// GetAllFollowerIDsByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockRelationshipRepository_Expecter) GetAllFollowerIDsByUserID(ctx interface{}, userID interface{}) *MockRelationshipRepository_GetAllFollowerIDsByUserID_Call {
	return &MockRelationshipRepository_GetAllFollowerIDsByUserID_Call{Call: _e.mock.On("GetAllFollowerIDsByUserID", ctx, userID)}
}

func (_c *MockRelationshipRepository_GetAllFollowerIDsByUserID_Call) Run(run func(ctx context.Context, userID string)) *MockRelationshipRepository_GetAllFollowerIDsByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRelationshipRepository_GetAllFollowerIDsByUserID_Call) Return(strings []string, err error) *MockRelationshipRepository_GetAllFollowerIDsByUserID_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockRelationshipRepository_GetAllFollowerIDsByUserID_Call) RunAndReturn(run func(ctx context.Context, userID string) ([]string, error)) *MockRelationshipRepository_GetAllFollowerIDsByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllFollowingIDsByUserID provides a mock function for the type MockRelationshipRepository
func (_mock *MockRelationshipRepository) GetAllFollowingIDsByUserID(ctx context.Context, userID string) ([]string, error) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllFollowingIDsByUserID")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRelationshipRepository_GetAllFollowingIDsByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllFollowingIDsByUserID'
type MockRelationshipRepository_GetAllFollowingIDsByUserID_Call struct {
	*mock.Call
}

// GetAllFollowingIDsByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockRelationshipRepository_Expecter) GetAllFollowingIDsByUserID(ctx interface{}, userID interface{}) *MockRelationshipRepository_GetAllFollowingIDsByUserID_Call {
	return &MockRelationshipRepository_GetAllFollowingIDsByUserID_Call{Call: _e.mock.On("GetAllFollowingIDsByUserID", ctx, userID)}
}

func (_c *MockRelationshipRepository_GetAllFollowingIDsByUserID_Call) Run(run func(ctx context.Context, userID string)) *MockRelationshipRepository_GetAllFollowingIDsByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRelationshipRepository_GetAllFollowingIDsByUserID_Call) Return(strings []string, err error) *MockRelationshipRepository_GetAllFollowingIDsByUserID_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockRelationshipRepository_GetAllFollowingIDsByUserID_Call) RunAndReturn(run func(ctx context.Context, userID string) ([]string, error)) *MockRelationshipRepository_GetAllFollowingIDsByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// InsertFollowing provides a mock function for the type MockRelationshipRepository
func (_mock *MockRelationshipRepository) InsertFollowing(ctx context.Context, following Following) error {
	ret := _mock.Called(ctx, following)

	if len(ret) == 0 {
		panic("no return value specified for InsertFollowing")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, Following) error); ok {
		r0 = returnFunc(ctx, following)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRelationshipRepository_InsertFollowing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertFollowing'
type MockRelationshipRepository_InsertFollowing_Call struct {
	*mock.Call
}

// InsertFollowing is a helper method to define mock.On call
//   - ctx context.Context
//   - following Following
func (_e *MockRelationshipRepository_Expecter) InsertFollowing(ctx interface{}, following interface{}) *MockRelationshipRepository_InsertFollowing_Call {
	return &MockRelationshipRepository_InsertFollowing_Call{Call: _e.mock.On("InsertFollowing", ctx, following)}
}

func (_c *MockRelationshipRepository_InsertFollowing_Call) Run(run func(ctx context.Context, following Following)) *MockRelationshipRepository_InsertFollowing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 Following
		if args[1] != nil {
			arg1 = args[1].(Following)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRelationshipRepository_InsertFollowing_Call) Return(err error) *MockRelationshipRepository_InsertFollowing_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRelationshipRepository_InsertFollowing_Call) RunAndReturn(run func(ctx context.Context, following Following) error) *MockRelationshipRepository_InsertFollowing_Call {
	_c.Call.Return(run)
	return _c
}

// PublishFollowingTopic provides a mock function for the type MockRelationshipRepository
func (_mock *MockRelationshipRepository) PublishFollowingTopic(ctx context.Context, message FollowingTopicMessage) error {
	ret := _mock.Called(ctx, message)

	if len(ret) == 0 {
		panic("no return value specified for PublishFollowingTopic")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, FollowingTopicMessage) error); ok {
		r0 = returnFunc(ctx, message)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRelationshipRepository_PublishFollowingTopic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishFollowingTopic'
type MockRelationshipRepository_PublishFollowingTopic_Call struct {
	*mock.Call
}

// PublishFollowingTopic is a helper method to define mock.On call
//   - ctx context.Context
//   - message FollowingTopicMessage
func (_e *MockRelationshipRepository_Expecter) PublishFollowingTopic(ctx interface{}, message interface{}) *MockRelationshipRepository_PublishFollowingTopic_Call {
	return &MockRelationshipRepository_PublishFollowingTopic_Call{Call: _e.mock.On("PublishFollowingTopic", ctx, message)}
}

func (_c *MockRelationshipRepository_PublishFollowingTopic_Call) Run(run func(ctx context.Context, message FollowingTopicMessage)) *MockRelationshipRepository_PublishFollowingTopic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 FollowingTopicMessage
		if args[1] != nil {
			arg1 = args[1].(FollowingTopicMessage)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRelationshipRepository_PublishFollowingTopic_Call) Return(err error) *MockRelationshipRepository_PublishFollowingTopic_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRelationshipRepository_PublishFollowingTopic_Call) RunAndReturn(run func(ctx context.Context, message FollowingTopicMessage) error) *MockRelationshipRepository_PublishFollowingTopic_Call {
	_c.Call.Return(run)
	return _c
}
